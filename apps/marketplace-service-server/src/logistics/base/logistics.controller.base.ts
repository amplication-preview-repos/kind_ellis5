/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LogisticsService } from "../logistics.service";
import { LogisticsCreateInput } from "./LogisticsCreateInput";
import { Logistics } from "./Logistics";
import { LogisticsFindManyArgs } from "./LogisticsFindManyArgs";
import { LogisticsWhereUniqueInput } from "./LogisticsWhereUniqueInput";
import { LogisticsUpdateInput } from "./LogisticsUpdateInput";

export class LogisticsControllerBase {
  constructor(protected readonly service: LogisticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Logistics })
  async createLogistics(
    @common.Body() data: LogisticsCreateInput
  ): Promise<Logistics> {
    return await this.service.createLogistics({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        deliveryAddress: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Logistics] })
  @ApiNestedQuery(LogisticsFindManyArgs)
  async logisticsItems(@common.Req() request: Request): Promise<Logistics[]> {
    const args = plainToClass(LogisticsFindManyArgs, request.query);
    return this.service.logisticsItems({
      ...args,
      select: {
        createdAt: true,
        deliveryAddress: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Logistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async logistics(
    @common.Param() params: LogisticsWhereUniqueInput
  ): Promise<Logistics | null> {
    const result = await this.service.logistics({
      where: params,
      select: {
        createdAt: true,
        deliveryAddress: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Logistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLogistics(
    @common.Param() params: LogisticsWhereUniqueInput,
    @common.Body() data: LogisticsUpdateInput
  ): Promise<Logistics | null> {
    try {
      return await this.service.updateLogistics({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          deliveryAddress: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Logistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLogistics(
    @common.Param() params: LogisticsWhereUniqueInput
  ): Promise<Logistics | null> {
    try {
      return await this.service.deleteLogistics({
        where: params,
        select: {
          createdAt: true,
          deliveryAddress: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
