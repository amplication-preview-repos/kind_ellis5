/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Logistics } from "./Logistics";
import { LogisticsCountArgs } from "./LogisticsCountArgs";
import { LogisticsFindManyArgs } from "./LogisticsFindManyArgs";
import { LogisticsFindUniqueArgs } from "./LogisticsFindUniqueArgs";
import { CreateLogisticsArgs } from "./CreateLogisticsArgs";
import { UpdateLogisticsArgs } from "./UpdateLogisticsArgs";
import { DeleteLogisticsArgs } from "./DeleteLogisticsArgs";
import { Order } from "../../order/base/Order";
import { LogisticsService } from "../logistics.service";
@graphql.Resolver(() => Logistics)
export class LogisticsResolverBase {
  constructor(protected readonly service: LogisticsService) {}

  async _logisticsItemsMeta(
    @graphql.Args() args: LogisticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Logistics])
  async logisticsItems(
    @graphql.Args() args: LogisticsFindManyArgs
  ): Promise<Logistics[]> {
    return this.service.logisticsItems(args);
  }

  @graphql.Query(() => Logistics, { nullable: true })
  async logistics(
    @graphql.Args() args: LogisticsFindUniqueArgs
  ): Promise<Logistics | null> {
    const result = await this.service.logistics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Logistics)
  async createLogistics(
    @graphql.Args() args: CreateLogisticsArgs
  ): Promise<Logistics> {
    return await this.service.createLogistics({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Logistics)
  async updateLogistics(
    @graphql.Args() args: UpdateLogisticsArgs
  ): Promise<Logistics | null> {
    try {
      return await this.service.updateLogistics({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Logistics)
  async deleteLogistics(
    @graphql.Args() args: DeleteLogisticsArgs
  ): Promise<Logistics | null> {
    try {
      return await this.service.deleteLogistics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(@graphql.Parent() parent: Logistics): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
