/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Logistics as PrismaLogistics,
  Order as PrismaOrder,
} from "@prisma/client";

export class LogisticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LogisticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.logistics.count(args);
  }

  async logisticsItems(
    args: Prisma.LogisticsFindManyArgs
  ): Promise<PrismaLogistics[]> {
    return this.prisma.logistics.findMany(args);
  }
  async logistics(
    args: Prisma.LogisticsFindUniqueArgs
  ): Promise<PrismaLogistics | null> {
    return this.prisma.logistics.findUnique(args);
  }
  async createLogistics(
    args: Prisma.LogisticsCreateArgs
  ): Promise<PrismaLogistics> {
    return this.prisma.logistics.create(args);
  }
  async updateLogistics(
    args: Prisma.LogisticsUpdateArgs
  ): Promise<PrismaLogistics> {
    return this.prisma.logistics.update(args);
  }
  async deleteLogistics(
    args: Prisma.LogisticsDeleteArgs
  ): Promise<PrismaLogistics> {
    return this.prisma.logistics.delete(args);
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.logistics
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }
}
