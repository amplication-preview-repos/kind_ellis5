/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryService } from "./DeliveryService";
import { DeliveryServiceCountArgs } from "./DeliveryServiceCountArgs";
import { DeliveryServiceFindManyArgs } from "./DeliveryServiceFindManyArgs";
import { DeliveryServiceFindUniqueArgs } from "./DeliveryServiceFindUniqueArgs";
import { CreateDeliveryServiceArgs } from "./CreateDeliveryServiceArgs";
import { UpdateDeliveryServiceArgs } from "./UpdateDeliveryServiceArgs";
import { DeleteDeliveryServiceArgs } from "./DeleteDeliveryServiceArgs";
import { DeliveryAgentFindManyArgs } from "../../deliveryAgent/base/DeliveryAgentFindManyArgs";
import { DeliveryAgent } from "../../deliveryAgent/base/DeliveryAgent";
import { DeliveryServiceService } from "../deliveryService.service";
@graphql.Resolver(() => DeliveryService)
export class DeliveryServiceResolverBase {
  constructor(protected readonly service: DeliveryServiceService) {}

  async _deliveryServicesMeta(
    @graphql.Args() args: DeliveryServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryService])
  async deliveryServices(
    @graphql.Args() args: DeliveryServiceFindManyArgs
  ): Promise<DeliveryService[]> {
    return this.service.deliveryServices(args);
  }

  @graphql.Query(() => DeliveryService, { nullable: true })
  async deliveryService(
    @graphql.Args() args: DeliveryServiceFindUniqueArgs
  ): Promise<DeliveryService | null> {
    const result = await this.service.deliveryService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryService)
  async createDeliveryService(
    @graphql.Args() args: CreateDeliveryServiceArgs
  ): Promise<DeliveryService> {
    return await this.service.createDeliveryService({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryService)
  async updateDeliveryService(
    @graphql.Args() args: UpdateDeliveryServiceArgs
  ): Promise<DeliveryService | null> {
    try {
      return await this.service.updateDeliveryService({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryService)
  async deleteDeliveryService(
    @graphql.Args() args: DeleteDeliveryServiceArgs
  ): Promise<DeliveryService | null> {
    try {
      return await this.service.deleteDeliveryService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DeliveryAgent], { name: "deliveryAgents" })
  async findDeliveryAgents(
    @graphql.Parent() parent: DeliveryService,
    @graphql.Args() args: DeliveryAgentFindManyArgs
  ): Promise<DeliveryAgent[]> {
    const results = await this.service.findDeliveryAgents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
