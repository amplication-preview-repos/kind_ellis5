/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryServiceService } from "../deliveryService.service";
import { DeliveryServiceCreateInput } from "./DeliveryServiceCreateInput";
import { DeliveryService } from "./DeliveryService";
import { DeliveryServiceFindManyArgs } from "./DeliveryServiceFindManyArgs";
import { DeliveryServiceWhereUniqueInput } from "./DeliveryServiceWhereUniqueInput";
import { DeliveryServiceUpdateInput } from "./DeliveryServiceUpdateInput";
import { DeliveryAgentFindManyArgs } from "../../deliveryAgent/base/DeliveryAgentFindManyArgs";
import { DeliveryAgent } from "../../deliveryAgent/base/DeliveryAgent";
import { DeliveryAgentWhereUniqueInput } from "../../deliveryAgent/base/DeliveryAgentWhereUniqueInput";

export class DeliveryServiceControllerBase {
  constructor(protected readonly service: DeliveryServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryService })
  async createDeliveryService(
    @common.Body() data: DeliveryServiceCreateInput
  ): Promise<DeliveryService> {
    return await this.service.createDeliveryService({
      data: data,
      select: {
        contactInfo: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryService] })
  @ApiNestedQuery(DeliveryServiceFindManyArgs)
  async deliveryServices(
    @common.Req() request: Request
  ): Promise<DeliveryService[]> {
    const args = plainToClass(DeliveryServiceFindManyArgs, request.query);
    return this.service.deliveryServices({
      ...args,
      select: {
        contactInfo: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryService(
    @common.Param() params: DeliveryServiceWhereUniqueInput
  ): Promise<DeliveryService | null> {
    const result = await this.service.deliveryService({
      where: params,
      select: {
        contactInfo: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryService(
    @common.Param() params: DeliveryServiceWhereUniqueInput,
    @common.Body() data: DeliveryServiceUpdateInput
  ): Promise<DeliveryService | null> {
    try {
      return await this.service.updateDeliveryService({
        where: params,
        data: data,
        select: {
          contactInfo: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryService(
    @common.Param() params: DeliveryServiceWhereUniqueInput
  ): Promise<DeliveryService | null> {
    try {
      return await this.service.deleteDeliveryService({
        where: params,
        select: {
          contactInfo: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/deliveryAgents")
  @ApiNestedQuery(DeliveryAgentFindManyArgs)
  async findDeliveryAgents(
    @common.Req() request: Request,
    @common.Param() params: DeliveryServiceWhereUniqueInput
  ): Promise<DeliveryAgent[]> {
    const query = plainToClass(DeliveryAgentFindManyArgs, request.query);
    const results = await this.service.findDeliveryAgents(params.id, {
      ...query,
      select: {
        createdAt: true,

        deliveryService: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deliveryAgents")
  async connectDeliveryAgents(
    @common.Param() params: DeliveryServiceWhereUniqueInput,
    @common.Body() body: DeliveryAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAgents: {
        connect: body,
      },
    };
    await this.service.updateDeliveryService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deliveryAgents")
  async updateDeliveryAgents(
    @common.Param() params: DeliveryServiceWhereUniqueInput,
    @common.Body() body: DeliveryAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAgents: {
        set: body,
      },
    };
    await this.service.updateDeliveryService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deliveryAgents")
  async disconnectDeliveryAgents(
    @common.Param() params: DeliveryServiceWhereUniqueInput,
    @common.Body() body: DeliveryAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAgents: {
        disconnect: body,
      },
    };
    await this.service.updateDeliveryService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
