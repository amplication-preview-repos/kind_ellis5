/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryAgentService } from "../deliveryAgent.service";
import { DeliveryAgentCreateInput } from "./DeliveryAgentCreateInput";
import { DeliveryAgent } from "./DeliveryAgent";
import { DeliveryAgentFindManyArgs } from "./DeliveryAgentFindManyArgs";
import { DeliveryAgentWhereUniqueInput } from "./DeliveryAgentWhereUniqueInput";
import { DeliveryAgentUpdateInput } from "./DeliveryAgentUpdateInput";

export class DeliveryAgentControllerBase {
  constructor(protected readonly service: DeliveryAgentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryAgent })
  async createDeliveryAgent(
    @common.Body() data: DeliveryAgentCreateInput
  ): Promise<DeliveryAgent> {
    return await this.service.createDeliveryAgent({
      data: {
        ...data,

        deliveryService: data.deliveryService
          ? {
              connect: data.deliveryService,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        deliveryService: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryAgent] })
  @ApiNestedQuery(DeliveryAgentFindManyArgs)
  async deliveryAgents(
    @common.Req() request: Request
  ): Promise<DeliveryAgent[]> {
    const args = plainToClass(DeliveryAgentFindManyArgs, request.query);
    return this.service.deliveryAgents({
      ...args,
      select: {
        createdAt: true,

        deliveryService: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryAgent(
    @common.Param() params: DeliveryAgentWhereUniqueInput
  ): Promise<DeliveryAgent | null> {
    const result = await this.service.deliveryAgent({
      where: params,
      select: {
        createdAt: true,

        deliveryService: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryAgent(
    @common.Param() params: DeliveryAgentWhereUniqueInput,
    @common.Body() data: DeliveryAgentUpdateInput
  ): Promise<DeliveryAgent | null> {
    try {
      return await this.service.updateDeliveryAgent({
        where: params,
        data: {
          ...data,

          deliveryService: data.deliveryService
            ? {
                connect: data.deliveryService,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          deliveryService: {
            select: {
              id: true,
            },
          },

          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryAgent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryAgent(
    @common.Param() params: DeliveryAgentWhereUniqueInput
  ): Promise<DeliveryAgent | null> {
    try {
      return await this.service.deleteDeliveryAgent({
        where: params,
        select: {
          createdAt: true,

          deliveryService: {
            select: {
              id: true,
            },
          },

          email: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
